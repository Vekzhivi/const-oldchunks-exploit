package com.example.addon.modules;

import com.example.addon.Addon;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.renderer.ShapeMode;
import meteordevelopment.meteorclient.settings.*;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.meteorclient.utils.render.color.SettingColor;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityType;
import net.minecraft.fluid.FluidState;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.network.packet.s2c.play.ChunkDeltaUpdateS2CPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.ChunkPos;
import net.minecraft.util.math.Vec2f;

import java.util.List;

public class ModuleExample extends Module {
    private final SettingGroup sgGeneral = settings.getDefaultGroup();


    public ModuleExample() {
        super(Addon.CATEGORY, "old-chunk", "constantium base finding helper");
    }

    private final Setting<Double> range = sgGeneral.add(new DoubleSetting.Builder()
        .name("extra-chunk-range")
        .defaultValue(0)
        .min(0)
        .sliderMax(6)
        .build()
    );
    private final Setting<Boolean> constant = sgGeneral.add(new BoolSetting.Builder()
        .name("constantium-entites")
        .defaultValue(true)
        .build()
    );
    private final Setting<Boolean> fluidCheck = sgGeneral.add(new BoolSetting.Builder()
        .name("fluid-check")
        .defaultValue(true)
        .build()
    );
    private final Setting<List<Block>> whitelist = sgGeneral.add(new BlockListSetting.Builder()
        .name("ore-whitelist")
        .description("Ore to check in chunk")
        .defaultValue(List.of(Blocks.DEEPSLATE_COAL_ORE))
        .build()
    );
    static boolean search;
    public static boolean value;
    private final SettingGroup sgRender = settings.createGroup("Render");

    public final Setting<SettingColor> oldCOlor = sgRender.add(new ColorSetting.Builder()
        .name("old-color")
        .defaultValue(new SettingColor(225, 0, 0, 75))
        .build()
    );

    @EventHandler
    public void packet(PacketEvent.Receive receive) {
        if (receive.packet instanceof ChunkDeltaUpdateS2CPacket packet) search = true;
    }

    @EventHandler
    public void tick() {
        if (!search) return;
        boolean a = false;

        ChunkPos chunkPos = mc.world.getChunkManager().getWorldChunk((int) mc.player.getX(), (int) mc.player.getZ()).getPos();
        for (BlockPos blockPos : BlockPos.iterate(chunkPos.getStartPos(), chunkPos.getStartPos().add((int) (15 * range.get()), 255, (int) (15 * range
            .get())))) {

            for (Block block : whitelist.get()) {
                if (mc.world.getBlockState(blockPos).getBlock() == block) {
                    a = true;
                    continue;
                }
            }
            if (constant.get()) {
                for (Entity entity : mc.world.getEntities()) {
                    if (entity instanceof oldEntity) {
                        a = true;
                    }
                }
            }
            if (fluidCheck.get()) {
                FluidState e = mc.world.getWorldChunk(blockPos).getFluidState(blockPos);
                if (!e.isEmpty() && !e.isStill()) a = true;
            }

            value = a;
        }
        search = false;
    }


    private class oldEntity extends Entity {

        public oldEntity() {
            super(EntityType.BOAT, mc.world); // Это работает только с константием, интересно, почему?
        }

        @Override
        public Vec2f getRotationClient() {
            return new Vec2f((float) (getX() / 0.2 * 0.13234), (float) getY()); // Очень хорошее наблюдение 0x (:
        }

        @Override
        protected void initDataTracker() {

        }

        @Override
        protected void readCustomDataFromNbt(NbtCompound nbt) {

        }

        @Override
        protected void writeCustomDataToNbt(NbtCompound nbt) {

        }
    }

    public static boolean isOld() {
        if (search) return false;
        if (!search) return value;
        return false;
    }
}
